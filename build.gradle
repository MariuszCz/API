buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'war'



idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

jar {
    baseName = 'TastyMeeting'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-jersey')
    compile("org.springframework.boot:spring-boot-starter-web:1.3.3.RELEASE")
    compile('org.springframework.boot:spring-boot-starter-security')
    compile("org.springframework.security.oauth:spring-security-oauth2")
    compile("org.springframework.social:spring-social-facebook")
    compile('cglib:cglib:3.2.1')
    compile 'io.swagger:swagger-jersey2-jaxrs:1.5.3'
    compile 'org.mongodb:mongo-java-driver:3.2.2'
    compile 'org.springframework.data:spring-data-mongodb:1.8.2.RELEASE'
    compile 'com.google.code.gson:gson:2.6.2'

    // http://mvnrepository.com/artifact/javax.mail/javax.mail-api
    compile group: 'javax.mail', name: 'javax.mail-api', version: '1.5.5'
    // http://mvnrepository.com/artifact/javax.mail/mail
    compile group: 'javax.mail', name: 'mail', version: '1.4.7'


    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

task stage(type: Copy, dependsOn: [clean, build]) {
    from jar.archivePath
    into project.rootDir
    rename {
        'app.jar'
    }
}
stage.mustRunAfter(clean)

clean << {
    project.file('app.jar').delete()
}
